<?xml version="1.0"?>
<launch>

  <!-- :::arguments::: -->

  <arg name="domain_name" default="safe_navigation"/>
  <!-- at the moment we need two domains. One domain for CHIMP and one pddl-version of that domain (without the method) for all other nodes (knowledge base, plan execution)-->
  <arg name="common_path" default="$(find rosplan_htn_demo)/data"/>
  <!-- hddl domain path (currently used for the knowledge base) -->
  <arg name="domain_path" default="$(arg common_path)/domain/$(arg domain_name)/domain.hddl"/>
  <!-- domain used in chimp planner (in .ddl format) -->
  <arg name="chimp_domain_path" default="$(arg common_path)/domain/$(arg domain_name)/domain.ddl" />

  <!-- load a particular initial state into KB at startup (optional) -->
  <arg name="problem_path" default="" />

  <!-- automatically generated pddl problem will be created here -->
  <arg name="autom_gen_problem_path" default="/tmp/problem.pdl" />

  <!-- planner will produce output plan and write to this location -->
  <arg name="data_path" default="/tmp" />

  <!-- use problem.pddl or receive problem from topic -->
  <arg name="use_problem_topic" default="true" />

  <!-- command to run the planner -->
  <arg name="planner_command"      default="timeout 10 $(find rosplan_dependencies)/chimp/gradlew run -p $(find rosplan_dependencies)/chimp -Dexec.args=&quot;DOMAIN PROBLEM -o=OUTPUT&quot;" />

  <!-- interface to the planning system -->
  <arg name="planner_interface"    default="chimp_planner_interface" />

  <!-- :::end of arguments::: -->

  <!-- rosplan hddl knowledge base -->
  <include file="$(find rosplan_knowledge_base)/launch/rosplan_knowledge_base.launch" >
    <arg name="domain_path" value="$(arg domain_path)" />
  </include>

  <!-- problem generation -->
  <include file="$(find rosplan_planning_system)/launch/includes/problem_interface.launch">
    <arg name="knowledge_base"   value="rosplan_knowledge_base" />
    <!-- problem_path: problem file will be automatically generated and placed in this location -->
    <arg name="problem_path"     value="$(arg autom_gen_problem_path)" />
    <arg name="problem_topic"    value="problem_instance" />
  </include>

  <!-- planner interface -->
  <include file="$(find rosplan_planning_system)/launch/includes/planner_interface.launch">
    <arg name="use_problem_topic"    value="$(arg use_problem_topic)" />
    <arg name="problem_topic"        value="/rosplan_problem_interface/problem_instance" />
    <arg name="planner_topic"        value="planner_output" />
    <arg name="domain_path"          value="$(arg chimp_domain_path)" />
    <arg name="problem_path"         value="$(arg autom_gen_problem_path)" />
    <arg name="data_path"            value="$(arg data_path)" />
    <arg name="planner_command"      value="$(arg planner_command)" />
    <arg name="planner_interface"    value="$(arg planner_interface)" />
  </include>

  <!-- plan parsing -->
  <include file="$(find rosplan_planning_system)/launch/includes/parsing_interface.launch">
    <arg name="knowledge_base"   value="rosplan_knowledge_base" />
    <arg name="planner_topic"    value="/rosplan_planner_interface/planner_output" />
    <arg name="plan_topic"       value="complete_plan" />
  </include>

  <!-- plan dispatch -->
  <include file="$(find rosplan_planning_system)/launch/includes/dispatch_interface.launch">
    <arg name="knowledge_base"           value="rosplan_knowledge_base" />
    <arg name="plan_topic"               value="/rosplan_parsing_interface/complete_plan" />
    <arg name="action_dispatch_topic"    value="action_dispatch" />
    <arg name="action_feedback_topic"    value="action_feedback" />
  </include>

</launch>
